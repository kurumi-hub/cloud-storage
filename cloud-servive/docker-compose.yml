
services:
  # VM1 - Load Balancer (Traefik)
  vm1-lb:
    image: traefik:v2.10
    container_name: vm1-lb
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik.toml:/etc/traefik/traefik.toml
    networks:
      - proxy

  # VM2 - Backend API & Database
  vm2-backend-db:
    image: postgres:15
    container_name: vm2-db
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: cloudstore
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - backend

  vm2-backend-api:
    image: my-backend-api
    container_name: vm2-backend
    build: ./backend
    restart: always
    depends_on:
      - vm2-backend-db
    environment:
      DATABASE_URL: postgresql://admin:secret@vm2-backend-db/cloudstore
    networks:
      - backend
      - proxy

  # VM3 - Cloud Storage (MinIO)
  vm3-storage:
    image: minio/minio
    container_name: vm3-storage
    restart: always
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: supersecret
    command: server /data --console-address ":9001"
    networks:
      - storage
      - proxy
    ports:
      - "9000:9000"
      - "9001:9001"

  # VM4 - Web Frontend & CI/CD
  vm4-frontend:
    image: my-frontend
    container_name: vm4-frontend
    build: ./frontend
    restart: always
    networks:
      - proxy

  # VM5 - Monitoring (Grafana & Prometheus)
  vm5-prometheus:
    image: prom/prometheus
    container_name: vm5-prometheus
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring

  vm5-grafana:
    image: grafana/grafana
    container_name: vm5-grafana
    restart: always
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring
    ports:
      - "3000:3000"

networks:
  proxy:
  backend:
  storage:
  monitoring:

volumes:
  db_data:
  minio_data:
  grafana_data:
